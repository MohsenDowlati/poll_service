// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, notification
func (_m *NotificationRepository) Create(ctx context.Context, notification *domain.Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *NotificationRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchPending provides a mock function with given fields: ctx, pagination
func (_m *NotificationRepository) FetchPending(ctx context.Context, pagination domain.PaginationQuery) ([]domain.Notification, int64, error) {

	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {

		panic("no return value specified for FetchPending")

	}

	var r0 []domain.Notification

	if rf, ok := ret.Get(0).(func(context.Context, domain.PaginationQuery) []domain.Notification); ok {

		r0 = rf(ctx, pagination)

	} else {

		if ret.Get(0) != nil {

			r0 = ret.Get(0).([]domain.Notification)

		}

	}

	var r1 int64

	if len(ret) > 1 {

		if rf, ok := ret.Get(1).(func(context.Context, domain.PaginationQuery) int64); ok {

			r1 = rf(ctx, pagination)

		} else if ret.Get(1) != nil {

			r1 = ret.Get(1).(int64)

		}

	}

	var r2 error

	if len(ret) > 2 {

		if rf, ok := ret.Get(2).(func(context.Context, domain.PaginationQuery) error); ok {

			r2 = rf(ctx, pagination)

		} else {

			r2 = ret.Error(2)

		}

	}

	return r0, r1, r2

}

// GetByID provides a mock function with given fields: ctx, id
func (_m *NotificationRepository) GetByID(ctx context.Context, id string) (domain.Notification, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Notification, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Notification); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Notification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, status, resolvedBy, updatedAt
func (_m *NotificationRepository) UpdateStatus(ctx context.Context, id string, status domain.NotificationStatus, resolvedBy primitive.ObjectID, updatedAt time.Time) error {
	ret := _m.Called(ctx, id, status, resolvedBy, updatedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.NotificationStatus, primitive.ObjectID, time.Time) error); ok {
		r0 = rf(ctx, id, status, resolvedBy, updatedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
