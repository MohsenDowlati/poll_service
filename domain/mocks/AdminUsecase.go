// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"
)

// AdminUsecase is an autogenerated mock type for the AdminUsecase type
type AdminUsecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: c, pagination
func (_m *AdminUsecase) Fetch(c context.Context, pagination domain.PaginationQuery) ([]domain.User, int64, error) {

	ret := _m.Called(c, pagination)

	if len(ret) == 0 {

		panic("no return value specified for Fetch")

	}

	var r0 []domain.User

	if rf, ok := ret.Get(0).(func(context.Context, domain.PaginationQuery) []domain.User); ok {

		r0 = rf(c, pagination)

	} else {

		if ret.Get(0) != nil {

			r0 = ret.Get(0).([]domain.User)

		}

	}

	var r1 int64

	if len(ret) > 1 {

		if rf, ok := ret.Get(1).(func(context.Context, domain.PaginationQuery) int64); ok {

			r1 = rf(c, pagination)

		} else if ret.Get(1) != nil {

			r1 = ret.Get(1).(int64)

		}

	}

	var r2 error

	if len(ret) > 2 {

		if rf, ok := ret.Get(2).(func(context.Context, domain.PaginationQuery) error); ok {

			r2 = rf(c, pagination)

		} else {

			r2 = ret.Error(2)

		}

	}

	return r0, r1, r2

}

// VerifyUser provides a mock function with given fields: c, userID, isVerified
func (_m *AdminUsecase) VerifyUser(c context.Context, userID string, isVerified bool) error {
	ret := _m.Called(c, userID, isVerified)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(c, userID, isVerified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminUsecase creates a new instance of AdminUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminUsecase {
	mock := &AdminUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
