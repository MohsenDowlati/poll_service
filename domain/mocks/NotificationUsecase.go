// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"
)

// NotificationUsecase is an autogenerated mock type for the NotificationUsecase type
type NotificationUsecase struct {
	mock.Mock
}

// Approve provides a mock function with given fields: ctx, notificationID, adminID
func (_m *NotificationUsecase) Approve(ctx context.Context, notificationID string, adminID string) (domain.Notification, error) {
	ret := _m.Called(ctx, notificationID, adminID)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.Notification, error)); ok {
		return rf(ctx, notificationID, adminID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Notification); ok {
		r0 = rf(ctx, notificationID, adminID)
	} else {
		r0 = ret.Get(0).(domain.Notification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, notificationID, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateForNewUser provides a mock function with given fields: ctx, user
func (_m *NotificationUsecase) CreateForNewUser(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateForNewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateForSheet provides a mock function with given fields: ctx, sheet
func (_m *NotificationUsecase) CreateForSheet(ctx context.Context, sheet *domain.Sheet) error {
	ret := _m.Called(ctx, sheet)

	if len(ret) == 0 {
		panic("no return value specified for CreateForSheet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Sheet) error); ok {
		r0 = rf(ctx, sheet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchPending provides a mock function with given fields: ctx, pagination
func (_m *NotificationUsecase) FetchPending(ctx context.Context, pagination domain.PaginationQuery) ([]domain.Notification, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FetchPending")
	}

	var r0 []domain.Notification
	if rf, ok := ret.Get(0).(func(context.Context, domain.PaginationQuery) []domain.Notification); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Notification)
		}
	}

	var r1 int64
	if len(ret) > 1 {
		if rf, ok := ret.Get(1).(func(context.Context, domain.PaginationQuery) int64); ok {
			r1 = rf(ctx, pagination)
		} else if ret.Get(1) != nil {
			r1 = ret.Get(1).(int64)
		}
	}

	var r2 error
	if len(ret) > 2 {
		if rf, ok := ret.Get(2).(func(context.Context, domain.PaginationQuery) error); ok {
			r2 = rf(ctx, pagination)
		} else {
			r2 = ret.Error(2)
		}
	}

	return r0, r1, r2
}

// Reject provides a mock function with given fields: ctx, notificationID, adminID
func (_m *NotificationUsecase) Reject(ctx context.Context, notificationID string, adminID string) (domain.Notification, error) {
	ret := _m.Called(ctx, notificationID, adminID)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.Notification, error)); ok {
		return rf(ctx, notificationID, adminID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Notification); ok {
		r0 = rf(ctx, notificationID, adminID)
	} else {
		r0 = ret.Get(0).(domain.Notification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, notificationID, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationUsecase creates a new instance of NotificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationUsecase {
	mock := &NotificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
