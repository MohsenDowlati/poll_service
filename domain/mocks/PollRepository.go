// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"
)

// PollRepository is an autogenerated mock type for the PollRepository type
type PollRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, poll
func (_m *PollRepository) Create(ctx context.Context, poll *domain.Poll) error {
	ret := _m.Called(ctx, poll)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Poll) error); ok {
		r0 = rf(ctx, poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PollRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditPoll provides a mock function with given fields: ctx, poll
func (_m *PollRepository) EditPoll(ctx context.Context, poll *domain.Poll) error {
	ret := _m.Called(ctx, poll)

	if len(ret) == 0 {
		panic("no return value specified for EditPoll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Poll) error); ok {
		r0 = rf(ctx, poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPollBySheetID provides a mock function with given fields: ctx, sheetID
func (_m *PollRepository) GetPollBySheetID(ctx context.Context, sheetID string, pagination domain.PaginationQuery) ([]domain.Poll, int64, error) {
	ret := _m.Called(ctx, sheetID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPollBySheetID")
	}

	var r0 []domain.Poll
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.PaginationQuery) []domain.Poll); ok {
		r0 = rf(ctx, sheetID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Poll)
		}
	}

	var r1 int64
	if len(ret) > 1 {
		if rf, ok := ret.Get(1).(func(context.Context, string, domain.PaginationQuery) int64); ok {
			r1 = rf(ctx, sheetID, pagination)
		} else if ret.Get(1) != nil {
			r1 = ret.Get(1).(int64)
		}
	}

	var r2 error
	if len(ret) > 2 {
		if rf, ok := ret.Get(2).(func(context.Context, string, domain.PaginationQuery) error); ok {
			r2 = rf(ctx, sheetID, pagination)
		} else {
			r2 = ret.Error(2)
		}
	}

	return r0, r1, r2
}

// SubmitVote provides a mock function with given fields: ctx, id, votes
func (_m *PollRepository) SubmitVote(ctx context.Context, id string, votes []int) error {
	ret := _m.Called(ctx, id, votes)

	if len(ret) == 0 {
		panic("no return value specified for SubmitVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int) error); ok {
		r0 = rf(ctx, id, votes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPollRepository creates a new instance of PollRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollRepository {
	mock := &PollRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
