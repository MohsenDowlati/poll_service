// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"
)

// PollClientUsecase is an autogenerated mock type for the PollClientUsecase type
type PollClientUsecase struct {
	mock.Mock
}

// GetBySheetID provides a mock function with given fields: c, sheetID
func (_m *PollClientUsecase) GetBySheetID(c context.Context, sheetID string, pagination domain.PaginationQuery) ([]domain.Poll, int64, error) {

	ret := _m.Called(c, sheetID, pagination)

	if len(ret) == 0 {

		panic("no return value specified for GetBySheetID")

	}

	var r0 []domain.Poll

	if rf, ok := ret.Get(0).(func(context.Context, string, domain.PaginationQuery) []domain.Poll); ok {

		r0 = rf(c, sheetID, pagination)

	} else {

		if ret.Get(0) != nil {

			r0 = ret.Get(0).([]domain.Poll)

		}

	}

	var r1 int64

	if len(ret) > 1 {

		if rf, ok := ret.Get(1).(func(context.Context, string, domain.PaginationQuery) int64); ok {

			r1 = rf(c, sheetID, pagination)

		} else if ret.Get(1) != nil {

			r1 = ret.Get(1).(int64)

		}

	}

	var r2 error

	if len(ret) > 2 {

		if rf, ok := ret.Get(2).(func(context.Context, string, domain.PaginationQuery) error); ok {

			r2 = rf(c, sheetID, pagination)

		} else {

			r2 = ret.Error(2)

		}

	}

	return r0, r1, r2

}

// SubmitVote provides a mock function with given fields: c, id, votes
func (_m *PollClientUsecase) SubmitVote(c context.Context, id string, votes []int) error {
	ret := _m.Called(c, id, votes)

	if len(ret) == 0 {
		panic("no return value specified for SubmitVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int) error); ok {
		r0 = rf(c, id, votes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPollClientUsecase creates a new instance of PollClientUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollClientUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollClientUsecase {
	mock := &PollClientUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
