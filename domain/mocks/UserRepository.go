// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, user
func (_m *UserRepository) Create(c context.Context, user *domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c, pagination
func (_m *UserRepository) Fetch(c context.Context, pagination domain.PaginationQuery) ([]domain.User, int64, error) {

	ret := _m.Called(c, pagination)

	if len(ret) == 0 {

		panic("no return value specified for Fetch")

	}

	var r0 []domain.User

	if rf, ok := ret.Get(0).(func(context.Context, domain.PaginationQuery) []domain.User); ok {

		r0 = rf(c, pagination)

	} else {

		if ret.Get(0) != nil {

			r0 = ret.Get(0).([]domain.User)

		}

	}

	var r1 int64

	if len(ret) > 1 {

		if rf, ok := ret.Get(1).(func(context.Context, domain.PaginationQuery) int64); ok {

			r1 = rf(c, pagination)

		} else if ret.Get(1) != nil {

			r1 = ret.Get(1).(int64)

		}

	}

	var r2 error

	if len(ret) > 2 {

		if rf, ok := ret.Get(2).(func(context.Context, domain.PaginationQuery) error); ok {

			r2 = rf(c, pagination)

		} else {

			r2 = ret.Error(2)

		}

	}

	return r0, r1, r2

}

// GetByEmail provides a mock function with given fields: c, email
func (_m *UserRepository) GetByEmail(c context.Context, email string) (domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *UserRepository) GetByID(c context.Context, id string) (domain.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPhone provides a mock function with given fields: c, phone
func (_m *UserRepository) GetByPhone(c context.Context, phone string) (domain.User, error) {
	ret := _m.Called(c, phone)

	if len(ret) == 0 {
		panic("no return value specified for GetByPhone")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, phone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, phone)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdminStatus provides a mock function with given fields: c, id, admin, isVerified
func (_m *UserRepository) UpdateAdminStatus(c context.Context, id string, admin domain.UserType, isVerified bool) error {
	ret := _m.Called(c, id, admin, isVerified)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAdminStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UserType, bool) error); ok {
		r0 = rf(c, id, admin, isVerified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUser provides a mock function with given fields: c, id
func (_m *UserRepository) VerifyUser(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
