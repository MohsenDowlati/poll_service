// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/amitshekhariitbhu/go-backend-clean-architecture/domain"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// SheetUseCase is an autogenerated mock type for the SheetUseCase type
type SheetUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, sheet
func (_m *SheetUseCase) Create(c context.Context, sheet domain.Sheet) error {
	ret := _m.Called(c, sheet)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Sheet) error); ok {
		r0 = rf(c, sheet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, id
func (_m *SheetUseCase) Delete(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *SheetUseCase) GetAll(c context.Context) ([]domain.Sheet, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Sheet, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Sheet); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *SheetUseCase) GetByID(c context.Context, id string) (domain.Sheet, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Sheet, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Sheet); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(domain.Sheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: c, userID
func (_m *SheetUseCase) GetByUserID(c context.Context, userID string) ([]domain.Sheet, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Sheet, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Sheet); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: c, id, status, approvedBy, approvedAt
func (_m *SheetUseCase) UpdateStatus(c context.Context, id string, status domain.SheetStatus, approvedBy primitive.ObjectID, approvedAt time.Time) error {
	ret := _m.Called(c, id, status, approvedBy, approvedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SheetStatus, primitive.ObjectID, time.Time) error); ok {
		r0 = rf(c, id, status, approvedBy, approvedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSheetUseCase creates a new instance of SheetUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSheetUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SheetUseCase {
	mock := &SheetUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
